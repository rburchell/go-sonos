// Code generated by makeservice. DO NOT EDIT.

// Package musicservices is a generated MusicServices package.
package musicservices

import (
	"bytes"
	"encoding/xml"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
)

const (
	ServiceURN     = "urn:schemas-upnp-org:service:MusicServices:1"
	EncodingSchema = "http://schemas.xmlsoap.org/soap/encoding/"
	EnvelopeSchema = "http://schemas.xmlsoap.org/soap/envelope/"
)

type ServiceOption func(*Service)

func WithClient(c *http.Client) ServiceOption {
	return func(s *Service) {
		s.client = c
	}
}

func WithLocation(u *url.URL) ServiceOption {
	return func(s *Service) {
		s.location = u
	}
}

type ServiceListVersion string

type Service struct {
	controlEndpoint *url.URL
	eventEndpoint   *url.URL

	ServiceListVersion *ServiceListVersion

	location *url.URL
	client   *http.Client
}

func NewService(opts ...ServiceOption) *Service {
	s := &Service{}

	c, err := url.Parse("/MusicServices/Control")
	if nil != err {
		panic(err)
	}
	e, err := url.Parse("/MusicServices/Event")
	if nil != err {
		panic(err)
	}

	for _, opt := range opts {
		opt(s)
	}

	if s.client == nil {
		panic("no client location")
	}
	if s.location == nil {
		panic("empty location")
	}

	s.controlEndpoint = s.location.ResolveReference(c)
	s.eventEndpoint = s.location.ResolveReference(e)

	return s
}

func (s *Service) ControlEndpoint() *url.URL {
	return s.controlEndpoint
}

func (s *Service) EventEndpoint() *url.URL {
	return s.eventEndpoint
}

func (s *Service) Location() *url.URL {
	return s.location
}

func (s *Service) Client() *http.Client {
	return s.client
}

// internal use only
type envelope struct {
	XMLName       xml.Name `xml:"s:Envelope"`
	Xmlns         string   `xml:"xmlns:s,attr"`
	EncodingStyle string   `xml:"s:encodingStyle,attr"`
	Body          body     `xml:"s:Body"`
}

// internal use only
type body struct {
	XMLName                 xml.Name                     `xml:"s:Body"`
	GetSessionId            *GetSessionIdArgs            `xml:"u:GetSessionId,omitempty"`
	ListAvailableServices   *ListAvailableServicesArgs   `xml:"u:ListAvailableServices,omitempty"`
	UpdateAvailableServices *UpdateAvailableServicesArgs `xml:"u:UpdateAvailableServices,omitempty"`
}

// internal use only
type envelopeResponse struct {
	XMLName       xml.Name     `xml:"Envelope"`
	Xmlns         string       `xml:"xmlns:s,attr"`
	EncodingStyle string       `xml:"encodingStyle,attr"`
	Body          bodyResponse `xml:"Body"`
}

// internal use only
type bodyResponse struct {
	XMLName                 xml.Name                         `xml:"Body"`
	GetSessionId            *GetSessionIdResponse            `xml:"GetSessionIdResponse,omitempty"`
	ListAvailableServices   *ListAvailableServicesResponse   `xml:"ListAvailableServicesResponse,omitempty"`
	UpdateAvailableServices *UpdateAvailableServicesResponse `xml:"UpdateAvailableServicesResponse,omitempty"`
}

func (s *Service) exec(actionName string, envelope *envelope) (*envelopeResponse, error) {
	postBody, err := xml.Marshal(envelope)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", s.controlEndpoint.String(), bytes.NewBuffer(postBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "text/xml; charset=\"utf-8\"")
	req.Header.Set("SOAPAction", ServiceURN+"#"+actionName)
	res, err := s.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	responseBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	var envelopeResponse envelopeResponse
	err = xml.Unmarshal(responseBody, &envelopeResponse)
	if err != nil {
		return nil, err
	}
	return &envelopeResponse, nil
}

type GetSessionIdArgs struct {
	Xmlns     string `xml:"xmlns:u,attr"`
	ServiceId uint32 `xml:"ServiceId"`
	Username  string `xml:"Username"`
}
type GetSessionIdResponse struct {
	SessionId string `xml:"SessionId"`
}

func (s *Service) GetSessionId(args *GetSessionIdArgs) (*GetSessionIdResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetSessionId",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetSessionId: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetSessionId == nil {
		return nil, errors.New(`unexpected response from service calling musicservices.GetSessionId()`)
	}

	return r.Body.GetSessionId, nil
}

type ListAvailableServicesArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type ListAvailableServicesResponse struct {
	AvailableServiceDescriptorList string `xml:"AvailableServiceDescriptorList"`
	AvailableServiceTypeList       string `xml:"AvailableServiceTypeList"`
	AvailableServiceListVersion    string `xml:"AvailableServiceListVersion"`
}

func (s *Service) ListAvailableServices(args *ListAvailableServicesArgs) (*ListAvailableServicesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("ListAvailableServices",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{ListAvailableServices: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.ListAvailableServices == nil {
		return nil, errors.New(`unexpected response from service calling musicservices.ListAvailableServices()`)
	}

	return r.Body.ListAvailableServices, nil
}

type UpdateAvailableServicesArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type UpdateAvailableServicesResponse struct {
}

func (s *Service) UpdateAvailableServices(args *UpdateAvailableServicesArgs) (*UpdateAvailableServicesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("UpdateAvailableServices",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{UpdateAvailableServices: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.UpdateAvailableServices == nil {
		return nil, errors.New(`unexpected response from service calling musicservices.UpdateAvailableServices()`)
	}

	return r.Body.UpdateAvailableServices, nil
}

type UpnpEvent struct {
	XMLName      xml.Name   `xml:"propertyset"`
	XMLNameSpace string     `xml:"xmlns:e,attr"`
	Properties   []Property `xml:"property"`
}
type Property struct {
	XMLName            xml.Name            `xml:"property"`
	ServiceListVersion *ServiceListVersion `xml:"ServiceListVersion"`
}

func (zp *Service) ParseEvent(body []byte) []interface{} {
	var evt UpnpEvent
	var events []interface{}
	err := xml.Unmarshal(body, &evt)
	if err != nil {
		return events
	}
	for _, prop := range evt.Properties {
		_ = prop
		switch {
		case prop.ServiceListVersion != nil:
			zp.ServiceListVersion = prop.ServiceListVersion
			events = append(events, *prop.ServiceListVersion)
		}
	}
	return events
}
