// Code generated by makeservice. DO NOT EDIT.

// Package deviceproperties is a generated DeviceProperties package.
package deviceproperties

import (
	"bytes"
	"encoding/xml"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
)

const (
	ServiceURN     = "urn:schemas-upnp-org:service:DeviceProperties:1"
	EncodingSchema = "http://schemas.xmlsoap.org/soap/encoding/"
	EnvelopeSchema = "http://schemas.xmlsoap.org/soap/envelope/"
)

type ServiceOption func(*Service)

func WithClient(c *http.Client) ServiceOption {
	return func(s *Service) {
		s.client = c
	}
}

func WithLocation(u *url.URL) ServiceOption {
	return func(s *Service) {
		s.location = u
	}
}

type SettingsReplicationState string
type ZoneName string
type Icon string
type Configuration string
type Invisible bool
type IsZoneBridge bool
type AirPlayEnabled bool
type SupportsAudioIn bool
type SupportsAudioClip bool
type IsIdle bool
type MoreInfo string
type ChannelMapSet string
type HTSatChanMapSet string
type HTFreq uint32
type HTBondedZoneCommitState uint32
type Orientation int32
type LastChangedPlayState string
type RoomCalibrationState int32
type AvailableRoomCalibration string
type TVConfigurationError bool
type HdmiCecAvailable bool
type WirelessMode uint32
type WirelessLeafOnly bool
type HasConfiguredSSID bool
type ChannelFreq uint32
type BehindWifiExtender uint32
type WifiEnabled bool
type EthLink bool
type ConfigMode string
type SecureRegState uint32
type VoiceConfigState uint32
type MicEnabled uint32

type Service struct {
	controlEndpoint *url.URL
	eventEndpoint   *url.URL

	SettingsReplicationState *SettingsReplicationState
	ZoneName                 *ZoneName
	Icon                     *Icon
	Configuration            *Configuration
	Invisible                *Invisible
	IsZoneBridge             *IsZoneBridge
	AirPlayEnabled           *AirPlayEnabled
	SupportsAudioIn          *SupportsAudioIn
	SupportsAudioClip        *SupportsAudioClip
	IsIdle                   *IsIdle
	MoreInfo                 *MoreInfo
	ChannelMapSet            *ChannelMapSet
	HTSatChanMapSet          *HTSatChanMapSet
	HTFreq                   *HTFreq
	HTBondedZoneCommitState  *HTBondedZoneCommitState
	Orientation              *Orientation
	LastChangedPlayState     *LastChangedPlayState
	RoomCalibrationState     *RoomCalibrationState
	AvailableRoomCalibration *AvailableRoomCalibration
	TVConfigurationError     *TVConfigurationError
	HdmiCecAvailable         *HdmiCecAvailable
	WirelessMode             *WirelessMode
	WirelessLeafOnly         *WirelessLeafOnly
	HasConfiguredSSID        *HasConfiguredSSID
	ChannelFreq              *ChannelFreq
	BehindWifiExtender       *BehindWifiExtender
	WifiEnabled              *WifiEnabled
	EthLink                  *EthLink
	ConfigMode               *ConfigMode
	SecureRegState           *SecureRegState
	VoiceConfigState         *VoiceConfigState
	MicEnabled               *MicEnabled

	location *url.URL
	client   *http.Client
}

func NewService(opts ...ServiceOption) *Service {
	s := &Service{}

	c, err := url.Parse("/DeviceProperties/Control")
	if nil != err {
		panic(err)
	}
	e, err := url.Parse("/DeviceProperties/Event")
	if nil != err {
		panic(err)
	}

	for _, opt := range opts {
		opt(s)
	}

	if s.client == nil {
		panic("no client location")
	}
	if s.location == nil {
		panic("empty location")
	}

	s.controlEndpoint = s.location.ResolveReference(c)
	s.eventEndpoint = s.location.ResolveReference(e)

	return s
}

func (s *Service) ControlEndpoint() *url.URL {
	return s.controlEndpoint
}

func (s *Service) EventEndpoint() *url.URL {
	return s.eventEndpoint
}

func (s *Service) Location() *url.URL {
	return s.location
}

func (s *Service) Client() *http.Client {
	return s.client
}

// internal use only
type envelope struct {
	XMLName       xml.Name `xml:"s:Envelope"`
	Xmlns         string   `xml:"xmlns:s,attr"`
	EncodingStyle string   `xml:"s:encodingStyle,attr"`
	Body          body     `xml:"s:Body"`
}

// internal use only
type body struct {
	XMLName                    xml.Name                        `xml:"s:Body"`
	SetLEDState                *SetLEDStateArgs                `xml:"u:SetLEDState,omitempty"`
	GetLEDState                *GetLEDStateArgs                `xml:"u:GetLEDState,omitempty"`
	AddBondedZones             *AddBondedZonesArgs             `xml:"u:AddBondedZones,omitempty"`
	RemoveBondedZones          *RemoveBondedZonesArgs          `xml:"u:RemoveBondedZones,omitempty"`
	CreateStereoPair           *CreateStereoPairArgs           `xml:"u:CreateStereoPair,omitempty"`
	SeparateStereoPair         *SeparateStereoPairArgs         `xml:"u:SeparateStereoPair,omitempty"`
	SetZoneAttributes          *SetZoneAttributesArgs          `xml:"u:SetZoneAttributes,omitempty"`
	GetZoneAttributes          *GetZoneAttributesArgs          `xml:"u:GetZoneAttributes,omitempty"`
	GetHouseholdID             *GetHouseholdIDArgs             `xml:"u:GetHouseholdID,omitempty"`
	GetZoneInfo                *GetZoneInfoArgs                `xml:"u:GetZoneInfo,omitempty"`
	SetAutoplayLinkedZones     *SetAutoplayLinkedZonesArgs     `xml:"u:SetAutoplayLinkedZones,omitempty"`
	GetAutoplayLinkedZones     *GetAutoplayLinkedZonesArgs     `xml:"u:GetAutoplayLinkedZones,omitempty"`
	SetAutoplayRoomUUID        *SetAutoplayRoomUUIDArgs        `xml:"u:SetAutoplayRoomUUID,omitempty"`
	GetAutoplayRoomUUID        *GetAutoplayRoomUUIDArgs        `xml:"u:GetAutoplayRoomUUID,omitempty"`
	SetAutoplayVolume          *SetAutoplayVolumeArgs          `xml:"u:SetAutoplayVolume,omitempty"`
	GetAutoplayVolume          *GetAutoplayVolumeArgs          `xml:"u:GetAutoplayVolume,omitempty"`
	SetUseAutoplayVolume       *SetUseAutoplayVolumeArgs       `xml:"u:SetUseAutoplayVolume,omitempty"`
	GetUseAutoplayVolume       *GetUseAutoplayVolumeArgs       `xml:"u:GetUseAutoplayVolume,omitempty"`
	AddHTSatellite             *AddHTSatelliteArgs             `xml:"u:AddHTSatellite,omitempty"`
	RemoveHTSatellite          *RemoveHTSatelliteArgs          `xml:"u:RemoveHTSatellite,omitempty"`
	EnterConfigMode            *EnterConfigModeArgs            `xml:"u:EnterConfigMode,omitempty"`
	ExitConfigMode             *ExitConfigModeArgs             `xml:"u:ExitConfigMode,omitempty"`
	GetButtonState             *GetButtonStateArgs             `xml:"u:GetButtonState,omitempty"`
	GetHTForwardState          *GetHTForwardStateArgs          `xml:"u:GetHTForwardState,omitempty"`
	SetButtonLockState         *SetButtonLockStateArgs         `xml:"u:SetButtonLockState,omitempty"`
	GetButtonLockState         *GetButtonLockStateArgs         `xml:"u:GetButtonLockState,omitempty"`
	RoomDetectionStartChirping *RoomDetectionStartChirpingArgs `xml:"u:RoomDetectionStartChirping,omitempty"`
	RoomDetectionStopChirping  *RoomDetectionStopChirpingArgs  `xml:"u:RoomDetectionStopChirping,omitempty"`
}

// internal use only
type envelopeResponse struct {
	XMLName       xml.Name     `xml:"Envelope"`
	Xmlns         string       `xml:"xmlns:s,attr"`
	EncodingStyle string       `xml:"encodingStyle,attr"`
	Body          bodyResponse `xml:"Body"`
}

// internal use only
type bodyResponse struct {
	XMLName                    xml.Name                            `xml:"Body"`
	SetLEDState                *SetLEDStateResponse                `xml:"SetLEDStateResponse,omitempty"`
	GetLEDState                *GetLEDStateResponse                `xml:"GetLEDStateResponse,omitempty"`
	AddBondedZones             *AddBondedZonesResponse             `xml:"AddBondedZonesResponse,omitempty"`
	RemoveBondedZones          *RemoveBondedZonesResponse          `xml:"RemoveBondedZonesResponse,omitempty"`
	CreateStereoPair           *CreateStereoPairResponse           `xml:"CreateStereoPairResponse,omitempty"`
	SeparateStereoPair         *SeparateStereoPairResponse         `xml:"SeparateStereoPairResponse,omitempty"`
	SetZoneAttributes          *SetZoneAttributesResponse          `xml:"SetZoneAttributesResponse,omitempty"`
	GetZoneAttributes          *GetZoneAttributesResponse          `xml:"GetZoneAttributesResponse,omitempty"`
	GetHouseholdID             *GetHouseholdIDResponse             `xml:"GetHouseholdIDResponse,omitempty"`
	GetZoneInfo                *GetZoneInfoResponse                `xml:"GetZoneInfoResponse,omitempty"`
	SetAutoplayLinkedZones     *SetAutoplayLinkedZonesResponse     `xml:"SetAutoplayLinkedZonesResponse,omitempty"`
	GetAutoplayLinkedZones     *GetAutoplayLinkedZonesResponse     `xml:"GetAutoplayLinkedZonesResponse,omitempty"`
	SetAutoplayRoomUUID        *SetAutoplayRoomUUIDResponse        `xml:"SetAutoplayRoomUUIDResponse,omitempty"`
	GetAutoplayRoomUUID        *GetAutoplayRoomUUIDResponse        `xml:"GetAutoplayRoomUUIDResponse,omitempty"`
	SetAutoplayVolume          *SetAutoplayVolumeResponse          `xml:"SetAutoplayVolumeResponse,omitempty"`
	GetAutoplayVolume          *GetAutoplayVolumeResponse          `xml:"GetAutoplayVolumeResponse,omitempty"`
	SetUseAutoplayVolume       *SetUseAutoplayVolumeResponse       `xml:"SetUseAutoplayVolumeResponse,omitempty"`
	GetUseAutoplayVolume       *GetUseAutoplayVolumeResponse       `xml:"GetUseAutoplayVolumeResponse,omitempty"`
	AddHTSatellite             *AddHTSatelliteResponse             `xml:"AddHTSatelliteResponse,omitempty"`
	RemoveHTSatellite          *RemoveHTSatelliteResponse          `xml:"RemoveHTSatelliteResponse,omitempty"`
	EnterConfigMode            *EnterConfigModeResponse            `xml:"EnterConfigModeResponse,omitempty"`
	ExitConfigMode             *ExitConfigModeResponse             `xml:"ExitConfigModeResponse,omitempty"`
	GetButtonState             *GetButtonStateResponse             `xml:"GetButtonStateResponse,omitempty"`
	GetHTForwardState          *GetHTForwardStateResponse          `xml:"GetHTForwardStateResponse,omitempty"`
	SetButtonLockState         *SetButtonLockStateResponse         `xml:"SetButtonLockStateResponse,omitempty"`
	GetButtonLockState         *GetButtonLockStateResponse         `xml:"GetButtonLockStateResponse,omitempty"`
	RoomDetectionStartChirping *RoomDetectionStartChirpingResponse `xml:"RoomDetectionStartChirpingResponse,omitempty"`
	RoomDetectionStopChirping  *RoomDetectionStopChirpingResponse  `xml:"RoomDetectionStopChirpingResponse,omitempty"`
}

func (s *Service) exec(actionName string, envelope *envelope) (*envelopeResponse, error) {
	postBody, err := xml.Marshal(envelope)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", s.controlEndpoint.String(), bytes.NewBuffer(postBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "text/xml; charset=\"utf-8\"")
	req.Header.Set("SOAPAction", ServiceURN+"#"+actionName)
	res, err := s.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	responseBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	var envelopeResponse envelopeResponse
	err = xml.Unmarshal(responseBody, &envelopeResponse)
	if err != nil {
		return nil, err
	}
	return &envelopeResponse, nil
}

type SetLEDStateArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
	// Allowed Value: On
	// Allowed Value: Off
	DesiredLEDState string `xml:"DesiredLEDState"`
}
type SetLEDStateResponse struct {
}

func (s *Service) SetLEDState(args *SetLEDStateArgs) (*SetLEDStateResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetLEDState",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetLEDState: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetLEDState == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetLEDState()`)
	}

	return r.Body.SetLEDState, nil
}

type GetLEDStateArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetLEDStateResponse struct {
	CurrentLEDState string `xml:"CurrentLEDState"`
}

func (s *Service) GetLEDState(args *GetLEDStateArgs) (*GetLEDStateResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetLEDState",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetLEDState: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetLEDState == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetLEDState()`)
	}

	return r.Body.GetLEDState, nil
}

type AddBondedZonesArgs struct {
	Xmlns         string `xml:"xmlns:u,attr"`
	ChannelMapSet string `xml:"ChannelMapSet"`
}
type AddBondedZonesResponse struct {
}

func (s *Service) AddBondedZones(args *AddBondedZonesArgs) (*AddBondedZonesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("AddBondedZones",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{AddBondedZones: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.AddBondedZones == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.AddBondedZones()`)
	}

	return r.Body.AddBondedZones, nil
}

type RemoveBondedZonesArgs struct {
	Xmlns         string `xml:"xmlns:u,attr"`
	ChannelMapSet string `xml:"ChannelMapSet"`
	KeepGrouped   bool   `xml:"KeepGrouped"`
}
type RemoveBondedZonesResponse struct {
}

func (s *Service) RemoveBondedZones(args *RemoveBondedZonesArgs) (*RemoveBondedZonesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RemoveBondedZones",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RemoveBondedZones: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RemoveBondedZones == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.RemoveBondedZones()`)
	}

	return r.Body.RemoveBondedZones, nil
}

type CreateStereoPairArgs struct {
	Xmlns         string `xml:"xmlns:u,attr"`
	ChannelMapSet string `xml:"ChannelMapSet"`
}
type CreateStereoPairResponse struct {
}

func (s *Service) CreateStereoPair(args *CreateStereoPairArgs) (*CreateStereoPairResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("CreateStereoPair",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{CreateStereoPair: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.CreateStereoPair == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.CreateStereoPair()`)
	}

	return r.Body.CreateStereoPair, nil
}

type SeparateStereoPairArgs struct {
	Xmlns         string `xml:"xmlns:u,attr"`
	ChannelMapSet string `xml:"ChannelMapSet"`
}
type SeparateStereoPairResponse struct {
}

func (s *Service) SeparateStereoPair(args *SeparateStereoPairArgs) (*SeparateStereoPairResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SeparateStereoPair",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SeparateStereoPair: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SeparateStereoPair == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SeparateStereoPair()`)
	}

	return r.Body.SeparateStereoPair, nil
}

type SetZoneAttributesArgs struct {
	Xmlns                 string `xml:"xmlns:u,attr"`
	DesiredZoneName       string `xml:"DesiredZoneName"`
	DesiredIcon           string `xml:"DesiredIcon"`
	DesiredConfiguration  string `xml:"DesiredConfiguration"`
	DesiredTargetRoomName string `xml:"DesiredTargetRoomName"`
}
type SetZoneAttributesResponse struct {
}

func (s *Service) SetZoneAttributes(args *SetZoneAttributesArgs) (*SetZoneAttributesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetZoneAttributes",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetZoneAttributes: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetZoneAttributes == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetZoneAttributes()`)
	}

	return r.Body.SetZoneAttributes, nil
}

type GetZoneAttributesArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetZoneAttributesResponse struct {
	CurrentZoneName       string `xml:"CurrentZoneName"`
	CurrentIcon           string `xml:"CurrentIcon"`
	CurrentConfiguration  string `xml:"CurrentConfiguration"`
	CurrentTargetRoomName string `xml:"CurrentTargetRoomName"`
}

func (s *Service) GetZoneAttributes(args *GetZoneAttributesArgs) (*GetZoneAttributesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetZoneAttributes",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetZoneAttributes: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetZoneAttributes == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetZoneAttributes()`)
	}

	return r.Body.GetZoneAttributes, nil
}

type GetHouseholdIDArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetHouseholdIDResponse struct {
	CurrentHouseholdID string `xml:"CurrentHouseholdID"`
}

func (s *Service) GetHouseholdID(args *GetHouseholdIDArgs) (*GetHouseholdIDResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetHouseholdID",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetHouseholdID: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetHouseholdID == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetHouseholdID()`)
	}

	return r.Body.GetHouseholdID, nil
}

type GetZoneInfoArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetZoneInfoResponse struct {
	SerialNumber           string `xml:"SerialNumber"`
	SoftwareVersion        string `xml:"SoftwareVersion"`
	DisplaySoftwareVersion string `xml:"DisplaySoftwareVersion"`
	HardwareVersion        string `xml:"HardwareVersion"`
	IPAddress              string `xml:"IPAddress"`
	MACAddress             string `xml:"MACAddress"`
	CopyrightInfo          string `xml:"CopyrightInfo"`
	ExtraInfo              string `xml:"ExtraInfo"`
	HTAudioIn              uint32 `xml:"HTAudioIn"`
	Flags                  uint32 `xml:"Flags"`
}

func (s *Service) GetZoneInfo(args *GetZoneInfoArgs) (*GetZoneInfoResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetZoneInfo",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetZoneInfo: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetZoneInfo == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetZoneInfo()`)
	}

	return r.Body.GetZoneInfo, nil
}

type SetAutoplayLinkedZonesArgs struct {
	Xmlns              string `xml:"xmlns:u,attr"`
	IncludeLinkedZones bool   `xml:"IncludeLinkedZones"`
	Source             string `xml:"Source"`
}
type SetAutoplayLinkedZonesResponse struct {
}

func (s *Service) SetAutoplayLinkedZones(args *SetAutoplayLinkedZonesArgs) (*SetAutoplayLinkedZonesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetAutoplayLinkedZones",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetAutoplayLinkedZones: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetAutoplayLinkedZones == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetAutoplayLinkedZones()`)
	}

	return r.Body.SetAutoplayLinkedZones, nil
}

type GetAutoplayLinkedZonesArgs struct {
	Xmlns  string `xml:"xmlns:u,attr"`
	Source string `xml:"Source"`
}
type GetAutoplayLinkedZonesResponse struct {
	IncludeLinkedZones bool `xml:"IncludeLinkedZones"`
}

func (s *Service) GetAutoplayLinkedZones(args *GetAutoplayLinkedZonesArgs) (*GetAutoplayLinkedZonesResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetAutoplayLinkedZones",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetAutoplayLinkedZones: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetAutoplayLinkedZones == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetAutoplayLinkedZones()`)
	}

	return r.Body.GetAutoplayLinkedZones, nil
}

type SetAutoplayRoomUUIDArgs struct {
	Xmlns    string `xml:"xmlns:u,attr"`
	RoomUUID string `xml:"RoomUUID"`
	Source   string `xml:"Source"`
}
type SetAutoplayRoomUUIDResponse struct {
}

func (s *Service) SetAutoplayRoomUUID(args *SetAutoplayRoomUUIDArgs) (*SetAutoplayRoomUUIDResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetAutoplayRoomUUID",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetAutoplayRoomUUID: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetAutoplayRoomUUID == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetAutoplayRoomUUID()`)
	}

	return r.Body.SetAutoplayRoomUUID, nil
}

type GetAutoplayRoomUUIDArgs struct {
	Xmlns  string `xml:"xmlns:u,attr"`
	Source string `xml:"Source"`
}
type GetAutoplayRoomUUIDResponse struct {
	RoomUUID string `xml:"RoomUUID"`
}

func (s *Service) GetAutoplayRoomUUID(args *GetAutoplayRoomUUIDArgs) (*GetAutoplayRoomUUIDResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetAutoplayRoomUUID",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetAutoplayRoomUUID: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetAutoplayRoomUUID == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetAutoplayRoomUUID()`)
	}

	return r.Body.GetAutoplayRoomUUID, nil
}

type SetAutoplayVolumeArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
	// Allowed Range: 0 -> 100 step: 1
	Volume uint16 `xml:"Volume"`
	Source string `xml:"Source"`
}
type SetAutoplayVolumeResponse struct {
}

func (s *Service) SetAutoplayVolume(args *SetAutoplayVolumeArgs) (*SetAutoplayVolumeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetAutoplayVolume",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetAutoplayVolume: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetAutoplayVolume == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetAutoplayVolume()`)
	}

	return r.Body.SetAutoplayVolume, nil
}

type GetAutoplayVolumeArgs struct {
	Xmlns  string `xml:"xmlns:u,attr"`
	Source string `xml:"Source"`
}
type GetAutoplayVolumeResponse struct {
	CurrentVolume uint16 `xml:"CurrentVolume"`
}

func (s *Service) GetAutoplayVolume(args *GetAutoplayVolumeArgs) (*GetAutoplayVolumeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetAutoplayVolume",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetAutoplayVolume: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetAutoplayVolume == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetAutoplayVolume()`)
	}

	return r.Body.GetAutoplayVolume, nil
}

type SetUseAutoplayVolumeArgs struct {
	Xmlns     string `xml:"xmlns:u,attr"`
	UseVolume bool   `xml:"UseVolume"`
	Source    string `xml:"Source"`
}
type SetUseAutoplayVolumeResponse struct {
}

func (s *Service) SetUseAutoplayVolume(args *SetUseAutoplayVolumeArgs) (*SetUseAutoplayVolumeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetUseAutoplayVolume",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetUseAutoplayVolume: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetUseAutoplayVolume == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetUseAutoplayVolume()`)
	}

	return r.Body.SetUseAutoplayVolume, nil
}

type GetUseAutoplayVolumeArgs struct {
	Xmlns  string `xml:"xmlns:u,attr"`
	Source string `xml:"Source"`
}
type GetUseAutoplayVolumeResponse struct {
	UseVolume bool `xml:"UseVolume"`
}

func (s *Service) GetUseAutoplayVolume(args *GetUseAutoplayVolumeArgs) (*GetUseAutoplayVolumeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetUseAutoplayVolume",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetUseAutoplayVolume: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetUseAutoplayVolume == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetUseAutoplayVolume()`)
	}

	return r.Body.GetUseAutoplayVolume, nil
}

type AddHTSatelliteArgs struct {
	Xmlns           string `xml:"xmlns:u,attr"`
	HTSatChanMapSet string `xml:"HTSatChanMapSet"`
}
type AddHTSatelliteResponse struct {
}

func (s *Service) AddHTSatellite(args *AddHTSatelliteArgs) (*AddHTSatelliteResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("AddHTSatellite",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{AddHTSatellite: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.AddHTSatellite == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.AddHTSatellite()`)
	}

	return r.Body.AddHTSatellite, nil
}

type RemoveHTSatelliteArgs struct {
	Xmlns       string `xml:"xmlns:u,attr"`
	SatRoomUUID string `xml:"SatRoomUUID"`
}
type RemoveHTSatelliteResponse struct {
}

func (s *Service) RemoveHTSatellite(args *RemoveHTSatelliteArgs) (*RemoveHTSatelliteResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RemoveHTSatellite",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RemoveHTSatellite: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RemoveHTSatellite == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.RemoveHTSatellite()`)
	}

	return r.Body.RemoveHTSatellite, nil
}

type EnterConfigModeArgs struct {
	Xmlns   string `xml:"xmlns:u,attr"`
	Mode    string `xml:"Mode"`
	Options string `xml:"Options"`
}
type EnterConfigModeResponse struct {
	State string `xml:"State"`
}

func (s *Service) EnterConfigMode(args *EnterConfigModeArgs) (*EnterConfigModeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("EnterConfigMode",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{EnterConfigMode: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.EnterConfigMode == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.EnterConfigMode()`)
	}

	return r.Body.EnterConfigMode, nil
}

type ExitConfigModeArgs struct {
	Xmlns   string `xml:"xmlns:u,attr"`
	Options string `xml:"Options"`
}
type ExitConfigModeResponse struct {
}

func (s *Service) ExitConfigMode(args *ExitConfigModeArgs) (*ExitConfigModeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("ExitConfigMode",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{ExitConfigMode: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.ExitConfigMode == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.ExitConfigMode()`)
	}

	return r.Body.ExitConfigMode, nil
}

type GetButtonStateArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetButtonStateResponse struct {
	State string `xml:"State"`
}

func (s *Service) GetButtonState(args *GetButtonStateArgs) (*GetButtonStateResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetButtonState",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetButtonState: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetButtonState == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetButtonState()`)
	}

	return r.Body.GetButtonState, nil
}

type GetHTForwardStateArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetHTForwardStateResponse struct {
	IsHTForwardEnabled bool `xml:"IsHTForwardEnabled"`
}

func (s *Service) GetHTForwardState(args *GetHTForwardStateArgs) (*GetHTForwardStateResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetHTForwardState",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetHTForwardState: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetHTForwardState == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetHTForwardState()`)
	}

	return r.Body.GetHTForwardState, nil
}

type SetButtonLockStateArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
	// Allowed Value: On
	// Allowed Value: Off
	DesiredButtonLockState string `xml:"DesiredButtonLockState"`
}
type SetButtonLockStateResponse struct {
}

func (s *Service) SetButtonLockState(args *SetButtonLockStateArgs) (*SetButtonLockStateResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetButtonLockState",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetButtonLockState: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetButtonLockState == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.SetButtonLockState()`)
	}

	return r.Body.SetButtonLockState, nil
}

type GetButtonLockStateArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetButtonLockStateResponse struct {
	CurrentButtonLockState string `xml:"CurrentButtonLockState"`
}

func (s *Service) GetButtonLockState(args *GetButtonLockStateArgs) (*GetButtonLockStateResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetButtonLockState",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetButtonLockState: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetButtonLockState == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.GetButtonLockState()`)
	}

	return r.Body.GetButtonLockState, nil
}

type RoomDetectionStartChirpingArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
	// Allowed Range: 0 -> 7 step: 1
	Channel                      uint16 `xml:"Channel"`
	DurationMilliseconds         uint32 `xml:"DurationMilliseconds"`
	ChirpIfPlayingSwappableAudio bool   `xml:"ChirpIfPlayingSwappableAudio"`
}
type RoomDetectionStartChirpingResponse struct {
	PlayId uint32 `xml:"PlayId"`
}

func (s *Service) RoomDetectionStartChirping(args *RoomDetectionStartChirpingArgs) (*RoomDetectionStartChirpingResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RoomDetectionStartChirping",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RoomDetectionStartChirping: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RoomDetectionStartChirping == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.RoomDetectionStartChirping()`)
	}

	return r.Body.RoomDetectionStartChirping, nil
}

type RoomDetectionStopChirpingArgs struct {
	Xmlns  string `xml:"xmlns:u,attr"`
	PlayId uint32 `xml:"PlayId"`
}
type RoomDetectionStopChirpingResponse struct {
}

func (s *Service) RoomDetectionStopChirping(args *RoomDetectionStopChirpingArgs) (*RoomDetectionStopChirpingResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RoomDetectionStopChirping",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RoomDetectionStopChirping: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RoomDetectionStopChirping == nil {
		return nil, errors.New(`unexpected response from service calling deviceproperties.RoomDetectionStopChirping()`)
	}

	return r.Body.RoomDetectionStopChirping, nil
}

type UpnpEvent struct {
	XMLName      xml.Name   `xml:"propertyset"`
	XMLNameSpace string     `xml:"xmlns:e,attr"`
	Properties   []Property `xml:"property"`
}
type Property struct {
	XMLName                  xml.Name                  `xml:"property"`
	SettingsReplicationState *SettingsReplicationState `xml:"SettingsReplicationState"`
	ZoneName                 *ZoneName                 `xml:"ZoneName"`
	Icon                     *Icon                     `xml:"Icon"`
	Configuration            *Configuration            `xml:"Configuration"`
	Invisible                *Invisible                `xml:"Invisible"`
	IsZoneBridge             *IsZoneBridge             `xml:"IsZoneBridge"`
	AirPlayEnabled           *AirPlayEnabled           `xml:"AirPlayEnabled"`
	SupportsAudioIn          *SupportsAudioIn          `xml:"SupportsAudioIn"`
	SupportsAudioClip        *SupportsAudioClip        `xml:"SupportsAudioClip"`
	IsIdle                   *IsIdle                   `xml:"IsIdle"`
	MoreInfo                 *MoreInfo                 `xml:"MoreInfo"`
	ChannelMapSet            *ChannelMapSet            `xml:"ChannelMapSet"`
	HTSatChanMapSet          *HTSatChanMapSet          `xml:"HTSatChanMapSet"`
	HTFreq                   *HTFreq                   `xml:"HTFreq"`
	HTBondedZoneCommitState  *HTBondedZoneCommitState  `xml:"HTBondedZoneCommitState"`
	Orientation              *Orientation              `xml:"Orientation"`
	LastChangedPlayState     *LastChangedPlayState     `xml:"LastChangedPlayState"`
	RoomCalibrationState     *RoomCalibrationState     `xml:"RoomCalibrationState"`
	AvailableRoomCalibration *AvailableRoomCalibration `xml:"AvailableRoomCalibration"`
	TVConfigurationError     *TVConfigurationError     `xml:"TVConfigurationError"`
	HdmiCecAvailable         *HdmiCecAvailable         `xml:"HdmiCecAvailable"`
	WirelessMode             *WirelessMode             `xml:"WirelessMode"`
	WirelessLeafOnly         *WirelessLeafOnly         `xml:"WirelessLeafOnly"`
	HasConfiguredSSID        *HasConfiguredSSID        `xml:"HasConfiguredSSID"`
	ChannelFreq              *ChannelFreq              `xml:"ChannelFreq"`
	BehindWifiExtender       *BehindWifiExtender       `xml:"BehindWifiExtender"`
	WifiEnabled              *WifiEnabled              `xml:"WifiEnabled"`
	EthLink                  *EthLink                  `xml:"EthLink"`
	ConfigMode               *ConfigMode               `xml:"ConfigMode"`
	SecureRegState           *SecureRegState           `xml:"SecureRegState"`
	VoiceConfigState         *VoiceConfigState         `xml:"VoiceConfigState"`
	MicEnabled               *MicEnabled               `xml:"MicEnabled"`
}

func (zp *Service) ParseEvent(body []byte) []interface{} {
	var evt UpnpEvent
	var events []interface{}
	err := xml.Unmarshal(body, &evt)
	if err != nil {
		return events
	}
	for _, prop := range evt.Properties {
		_ = prop
		switch {
		case prop.SettingsReplicationState != nil:
			zp.SettingsReplicationState = prop.SettingsReplicationState
			events = append(events, *prop.SettingsReplicationState)
		case prop.ZoneName != nil:
			zp.ZoneName = prop.ZoneName
			events = append(events, *prop.ZoneName)
		case prop.Icon != nil:
			zp.Icon = prop.Icon
			events = append(events, *prop.Icon)
		case prop.Configuration != nil:
			zp.Configuration = prop.Configuration
			events = append(events, *prop.Configuration)
		case prop.Invisible != nil:
			zp.Invisible = prop.Invisible
			events = append(events, *prop.Invisible)
		case prop.IsZoneBridge != nil:
			zp.IsZoneBridge = prop.IsZoneBridge
			events = append(events, *prop.IsZoneBridge)
		case prop.AirPlayEnabled != nil:
			zp.AirPlayEnabled = prop.AirPlayEnabled
			events = append(events, *prop.AirPlayEnabled)
		case prop.SupportsAudioIn != nil:
			zp.SupportsAudioIn = prop.SupportsAudioIn
			events = append(events, *prop.SupportsAudioIn)
		case prop.SupportsAudioClip != nil:
			zp.SupportsAudioClip = prop.SupportsAudioClip
			events = append(events, *prop.SupportsAudioClip)
		case prop.IsIdle != nil:
			zp.IsIdle = prop.IsIdle
			events = append(events, *prop.IsIdle)
		case prop.MoreInfo != nil:
			zp.MoreInfo = prop.MoreInfo
			events = append(events, *prop.MoreInfo)
		case prop.ChannelMapSet != nil:
			zp.ChannelMapSet = prop.ChannelMapSet
			events = append(events, *prop.ChannelMapSet)
		case prop.HTSatChanMapSet != nil:
			zp.HTSatChanMapSet = prop.HTSatChanMapSet
			events = append(events, *prop.HTSatChanMapSet)
		case prop.HTFreq != nil:
			zp.HTFreq = prop.HTFreq
			events = append(events, *prop.HTFreq)
		case prop.HTBondedZoneCommitState != nil:
			zp.HTBondedZoneCommitState = prop.HTBondedZoneCommitState
			events = append(events, *prop.HTBondedZoneCommitState)
		case prop.Orientation != nil:
			zp.Orientation = prop.Orientation
			events = append(events, *prop.Orientation)
		case prop.LastChangedPlayState != nil:
			zp.LastChangedPlayState = prop.LastChangedPlayState
			events = append(events, *prop.LastChangedPlayState)
		case prop.RoomCalibrationState != nil:
			zp.RoomCalibrationState = prop.RoomCalibrationState
			events = append(events, *prop.RoomCalibrationState)
		case prop.AvailableRoomCalibration != nil:
			zp.AvailableRoomCalibration = prop.AvailableRoomCalibration
			events = append(events, *prop.AvailableRoomCalibration)
		case prop.TVConfigurationError != nil:
			zp.TVConfigurationError = prop.TVConfigurationError
			events = append(events, *prop.TVConfigurationError)
		case prop.HdmiCecAvailable != nil:
			zp.HdmiCecAvailable = prop.HdmiCecAvailable
			events = append(events, *prop.HdmiCecAvailable)
		case prop.WirelessMode != nil:
			zp.WirelessMode = prop.WirelessMode
			events = append(events, *prop.WirelessMode)
		case prop.WirelessLeafOnly != nil:
			zp.WirelessLeafOnly = prop.WirelessLeafOnly
			events = append(events, *prop.WirelessLeafOnly)
		case prop.HasConfiguredSSID != nil:
			zp.HasConfiguredSSID = prop.HasConfiguredSSID
			events = append(events, *prop.HasConfiguredSSID)
		case prop.ChannelFreq != nil:
			zp.ChannelFreq = prop.ChannelFreq
			events = append(events, *prop.ChannelFreq)
		case prop.BehindWifiExtender != nil:
			zp.BehindWifiExtender = prop.BehindWifiExtender
			events = append(events, *prop.BehindWifiExtender)
		case prop.WifiEnabled != nil:
			zp.WifiEnabled = prop.WifiEnabled
			events = append(events, *prop.WifiEnabled)
		case prop.EthLink != nil:
			zp.EthLink = prop.EthLink
			events = append(events, *prop.EthLink)
		case prop.ConfigMode != nil:
			zp.ConfigMode = prop.ConfigMode
			events = append(events, *prop.ConfigMode)
		case prop.SecureRegState != nil:
			zp.SecureRegState = prop.SecureRegState
			events = append(events, *prop.SecureRegState)
		case prop.VoiceConfigState != nil:
			zp.VoiceConfigState = prop.VoiceConfigState
			events = append(events, *prop.VoiceConfigState)
		case prop.MicEnabled != nil:
			zp.MicEnabled = prop.MicEnabled
			events = append(events, *prop.MicEnabled)
		}
	}
	return events
}
