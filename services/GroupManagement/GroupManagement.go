// Code generated by makeservice. DO NOT EDIT.

// Package groupmanagement is a generated GroupManagement package.
package groupmanagement

import (
	"bytes"
	"encoding/xml"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
)

const (
	ServiceURN     = "urn:schemas-upnp-org:service:GroupManagement:1"
	EncodingSchema = "http://schemas.xmlsoap.org/soap/encoding/"
	EnvelopeSchema = "http://schemas.xmlsoap.org/soap/envelope/"
)

type ServiceOption func(*Service)

func WithClient(c *http.Client) ServiceOption {
	return func(s *Service) {
		s.client = c
	}
}

func WithLocation(u *url.URL) ServiceOption {
	return func(s *Service) {
		s.location = u
	}
}

type GroupCoordinatorIsLocal bool
type LocalGroupUUID string
type VirtualLineInGroupID string
type ResetVolumeAfter bool
type VolumeAVTransportURI string

type Service struct {
	controlEndpoint *url.URL
	eventEndpoint   *url.URL

	GroupCoordinatorIsLocal *GroupCoordinatorIsLocal
	LocalGroupUUID          *LocalGroupUUID
	VirtualLineInGroupID    *VirtualLineInGroupID
	ResetVolumeAfter        *ResetVolumeAfter
	VolumeAVTransportURI    *VolumeAVTransportURI

	location *url.URL
	client   *http.Client
}

func NewService(opts ...ServiceOption) *Service {
	s := &Service{}

	c, err := url.Parse("/GroupManagement/Control")
	if nil != err {
		panic(err)
	}
	e, err := url.Parse("/GroupManagement/Event")
	if nil != err {
		panic(err)
	}

	for _, opt := range opts {
		opt(s)
	}

	if s.client == nil {
		panic("no client location")
	}
	if s.location == nil {
		panic("empty location")
	}

	s.controlEndpoint = s.location.ResolveReference(c)
	s.eventEndpoint = s.location.ResolveReference(e)

	return s
}

func (s *Service) ControlEndpoint() *url.URL {
	return s.controlEndpoint
}

func (s *Service) EventEndpoint() *url.URL {
	return s.eventEndpoint
}

func (s *Service) Location() *url.URL {
	return s.location
}

func (s *Service) Client() *http.Client {
	return s.client
}

// internal use only
type envelope struct {
	XMLName       xml.Name `xml:"s:Envelope"`
	Xmlns         string   `xml:"xmlns:s,attr"`
	EncodingStyle string   `xml:"s:encodingStyle,attr"`
	Body          body     `xml:"s:Body"`
}

// internal use only
type body struct {
	XMLName                    xml.Name                        `xml:"s:Body"`
	AddMember                  *AddMemberArgs                  `xml:"u:AddMember,omitempty"`
	RemoveMember               *RemoveMemberArgs               `xml:"u:RemoveMember,omitempty"`
	ReportTrackBufferingResult *ReportTrackBufferingResultArgs `xml:"u:ReportTrackBufferingResult,omitempty"`
	SetSourceAreaIds           *SetSourceAreaIdsArgs           `xml:"u:SetSourceAreaIds,omitempty"`
}

// internal use only
type envelopeResponse struct {
	XMLName       xml.Name     `xml:"Envelope"`
	Xmlns         string       `xml:"xmlns:s,attr"`
	EncodingStyle string       `xml:"encodingStyle,attr"`
	Body          bodyResponse `xml:"Body"`
}

// internal use only
type bodyResponse struct {
	XMLName                    xml.Name                            `xml:"Body"`
	AddMember                  *AddMemberResponse                  `xml:"AddMemberResponse,omitempty"`
	RemoveMember               *RemoveMemberResponse               `xml:"RemoveMemberResponse,omitempty"`
	ReportTrackBufferingResult *ReportTrackBufferingResultResponse `xml:"ReportTrackBufferingResultResponse,omitempty"`
	SetSourceAreaIds           *SetSourceAreaIdsResponse           `xml:"SetSourceAreaIdsResponse,omitempty"`
}

func (s *Service) exec(actionName string, envelope *envelope) (*envelopeResponse, error) {
	postBody, err := xml.Marshal(envelope)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", s.controlEndpoint.String(), bytes.NewBuffer(postBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "text/xml; charset=\"utf-8\"")
	req.Header.Set("SOAPAction", ServiceURN+"#"+actionName)
	res, err := s.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	responseBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	var envelopeResponse envelopeResponse
	err = xml.Unmarshal(responseBody, &envelopeResponse)
	if err != nil {
		return nil, err
	}
	return &envelopeResponse, nil
}

type AddMemberArgs struct {
	Xmlns    string `xml:"xmlns:u,attr"`
	MemberID string `xml:"MemberID"`
	BootSeq  uint32 `xml:"BootSeq"`
}
type AddMemberResponse struct {
	CurrentTransportSettings string `xml:"CurrentTransportSettings"`
	CurrentURI               string `xml:"CurrentURI"`
	GroupUUIDJoined          string `xml:"GroupUUIDJoined"`
	ResetVolumeAfter         bool   `xml:"ResetVolumeAfter"`
	VolumeAVTransportURI     string `xml:"VolumeAVTransportURI"`
}

func (s *Service) AddMember(args *AddMemberArgs) (*AddMemberResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("AddMember",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{AddMember: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.AddMember == nil {
		return nil, errors.New(`unexpected response from service calling groupmanagement.AddMember()`)
	}

	return r.Body.AddMember, nil
}

type RemoveMemberArgs struct {
	Xmlns    string `xml:"xmlns:u,attr"`
	MemberID string `xml:"MemberID"`
}
type RemoveMemberResponse struct {
}

func (s *Service) RemoveMember(args *RemoveMemberArgs) (*RemoveMemberResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RemoveMember",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RemoveMember: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RemoveMember == nil {
		return nil, errors.New(`unexpected response from service calling groupmanagement.RemoveMember()`)
	}

	return r.Body.RemoveMember, nil
}

type ReportTrackBufferingResultArgs struct {
	Xmlns      string `xml:"xmlns:u,attr"`
	MemberID   string `xml:"MemberID"`
	ResultCode int32  `xml:"ResultCode"`
}
type ReportTrackBufferingResultResponse struct {
}

func (s *Service) ReportTrackBufferingResult(args *ReportTrackBufferingResultArgs) (*ReportTrackBufferingResultResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("ReportTrackBufferingResult",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{ReportTrackBufferingResult: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.ReportTrackBufferingResult == nil {
		return nil, errors.New(`unexpected response from service calling groupmanagement.ReportTrackBufferingResult()`)
	}

	return r.Body.ReportTrackBufferingResult, nil
}

type SetSourceAreaIdsArgs struct {
	Xmlns                string `xml:"xmlns:u,attr"`
	DesiredSourceAreaIds string `xml:"DesiredSourceAreaIds"`
}
type SetSourceAreaIdsResponse struct {
}

func (s *Service) SetSourceAreaIds(args *SetSourceAreaIdsArgs) (*SetSourceAreaIdsResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SetSourceAreaIds",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SetSourceAreaIds: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SetSourceAreaIds == nil {
		return nil, errors.New(`unexpected response from service calling groupmanagement.SetSourceAreaIds()`)
	}

	return r.Body.SetSourceAreaIds, nil
}

type UpnpEvent struct {
	XMLName      xml.Name   `xml:"propertyset"`
	XMLNameSpace string     `xml:"xmlns:e,attr"`
	Properties   []Property `xml:"property"`
}
type Property struct {
	XMLName                 xml.Name                 `xml:"property"`
	GroupCoordinatorIsLocal *GroupCoordinatorIsLocal `xml:"GroupCoordinatorIsLocal"`
	LocalGroupUUID          *LocalGroupUUID          `xml:"LocalGroupUUID"`
	VirtualLineInGroupID    *VirtualLineInGroupID    `xml:"VirtualLineInGroupID"`
	ResetVolumeAfter        *ResetVolumeAfter        `xml:"ResetVolumeAfter"`
	VolumeAVTransportURI    *VolumeAVTransportURI    `xml:"VolumeAVTransportURI"`
}

func (zp *Service) ParseEvent(body []byte) []interface{} {
	var evt UpnpEvent
	var events []interface{}
	err := xml.Unmarshal(body, &evt)
	if err != nil {
		return events
	}
	for _, prop := range evt.Properties {
		_ = prop
		switch {
		case prop.GroupCoordinatorIsLocal != nil:
			zp.GroupCoordinatorIsLocal = prop.GroupCoordinatorIsLocal
			events = append(events, *prop.GroupCoordinatorIsLocal)
		case prop.LocalGroupUUID != nil:
			zp.LocalGroupUUID = prop.LocalGroupUUID
			events = append(events, *prop.LocalGroupUUID)
		case prop.VirtualLineInGroupID != nil:
			zp.VirtualLineInGroupID = prop.VirtualLineInGroupID
			events = append(events, *prop.VirtualLineInGroupID)
		case prop.ResetVolumeAfter != nil:
			zp.ResetVolumeAfter = prop.ResetVolumeAfter
			events = append(events, *prop.ResetVolumeAfter)
		case prop.VolumeAVTransportURI != nil:
			zp.VolumeAVTransportURI = prop.VolumeAVTransportURI
			events = append(events, *prop.VolumeAVTransportURI)
		}
	}
	return events
}
