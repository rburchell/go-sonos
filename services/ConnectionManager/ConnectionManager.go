// Code generated by makeservice. DO NOT EDIT.

// Package connectionmanager is a generated ConnectionManager package.
package connectionmanager

import (
	"bytes"
	"encoding/xml"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
)

const (
	ServiceURN     = "urn:schemas-upnp-org:service:ConnectionManager:1"
	EncodingSchema = "http://schemas.xmlsoap.org/soap/encoding/"
	EnvelopeSchema = "http://schemas.xmlsoap.org/soap/envelope/"
)

type ServiceOption func(*Service)

func WithClient(c *http.Client) ServiceOption {
	return func(s *Service) {
		s.client = c
	}
}

func WithLocation(u *url.URL) ServiceOption {
	return func(s *Service) {
		s.location = u
	}
}

type SourceProtocolInfo string
type SinkProtocolInfo string
type CurrentConnectionIDs string

type Service struct {
	controlEndpoint *url.URL
	eventEndpoint   *url.URL

	SourceProtocolInfo   *SourceProtocolInfo
	SinkProtocolInfo     *SinkProtocolInfo
	CurrentConnectionIDs *CurrentConnectionIDs

	location *url.URL
	client   *http.Client
}

func NewService(opts ...ServiceOption) *Service {
	s := &Service{}

	c, err := url.Parse("/MediaServer/ConnectionManager/Control")
	if nil != err {
		panic(err)
	}
	e, err := url.Parse("/MediaServer/ConnectionManager/Event")
	if nil != err {
		panic(err)
	}

	for _, opt := range opts {
		opt(s)
	}

	if s.client == nil {
		panic("no client location")
	}
	if s.location == nil {
		panic("empty location")
	}

	s.controlEndpoint = s.location.ResolveReference(c)
	s.eventEndpoint = s.location.ResolveReference(e)

	return s
}

func (s *Service) ControlEndpoint() *url.URL {
	return s.controlEndpoint
}

func (s *Service) EventEndpoint() *url.URL {
	return s.eventEndpoint
}

func (s *Service) Location() *url.URL {
	return s.location
}

func (s *Service) Client() *http.Client {
	return s.client
}

// internal use only
type envelope struct {
	XMLName       xml.Name `xml:"s:Envelope"`
	Xmlns         string   `xml:"xmlns:s,attr"`
	EncodingStyle string   `xml:"s:encodingStyle,attr"`
	Body          body     `xml:"s:Body"`
}

// internal use only
type body struct {
	XMLName                  xml.Name                      `xml:"s:Body"`
	GetProtocolInfo          *GetProtocolInfoArgs          `xml:"u:GetProtocolInfo,omitempty"`
	GetCurrentConnectionIDs  *GetCurrentConnectionIDsArgs  `xml:"u:GetCurrentConnectionIDs,omitempty"`
	GetCurrentConnectionInfo *GetCurrentConnectionInfoArgs `xml:"u:GetCurrentConnectionInfo,omitempty"`
}

// internal use only
type envelopeResponse struct {
	XMLName       xml.Name     `xml:"Envelope"`
	Xmlns         string       `xml:"xmlns:s,attr"`
	EncodingStyle string       `xml:"encodingStyle,attr"`
	Body          bodyResponse `xml:"Body"`
}

// internal use only
type bodyResponse struct {
	XMLName                  xml.Name                          `xml:"Body"`
	GetProtocolInfo          *GetProtocolInfoResponse          `xml:"GetProtocolInfoResponse,omitempty"`
	GetCurrentConnectionIDs  *GetCurrentConnectionIDsResponse  `xml:"GetCurrentConnectionIDsResponse,omitempty"`
	GetCurrentConnectionInfo *GetCurrentConnectionInfoResponse `xml:"GetCurrentConnectionInfoResponse,omitempty"`
}

func (s *Service) exec(actionName string, envelope *envelope) (*envelopeResponse, error) {
	postBody, err := xml.Marshal(envelope)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", s.controlEndpoint.String(), bytes.NewBuffer(postBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "text/xml; charset=\"utf-8\"")
	req.Header.Set("SOAPAction", ServiceURN+"#"+actionName)
	res, err := s.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	responseBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	var envelopeResponse envelopeResponse
	err = xml.Unmarshal(responseBody, &envelopeResponse)
	if err != nil {
		return nil, err
	}
	return &envelopeResponse, nil
}

type GetProtocolInfoArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetProtocolInfoResponse struct {
	Source string `xml:"Source"`
	Sink   string `xml:"Sink"`
}

func (s *Service) GetProtocolInfo(args *GetProtocolInfoArgs) (*GetProtocolInfoResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetProtocolInfo",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetProtocolInfo: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetProtocolInfo == nil {
		return nil, errors.New(`unexpected response from service calling connectionmanager.GetProtocolInfo()`)
	}

	return r.Body.GetProtocolInfo, nil
}

type GetCurrentConnectionIDsArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type GetCurrentConnectionIDsResponse struct {
	ConnectionIDs string `xml:"ConnectionIDs"`
}

func (s *Service) GetCurrentConnectionIDs(args *GetCurrentConnectionIDsArgs) (*GetCurrentConnectionIDsResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetCurrentConnectionIDs",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetCurrentConnectionIDs: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetCurrentConnectionIDs == nil {
		return nil, errors.New(`unexpected response from service calling connectionmanager.GetCurrentConnectionIDs()`)
	}

	return r.Body.GetCurrentConnectionIDs, nil
}

type GetCurrentConnectionInfoArgs struct {
	Xmlns        string `xml:"xmlns:u,attr"`
	ConnectionID int32  `xml:"ConnectionID"`
}
type GetCurrentConnectionInfoResponse struct {
	RcsID                 int32  `xml:"RcsID"`
	AVTransportID         int32  `xml:"AVTransportID"`
	ProtocolInfo          string `xml:"ProtocolInfo"`
	PeerConnectionManager string `xml:"PeerConnectionManager"`
	PeerConnectionID      int32  `xml:"PeerConnectionID"`
	Direction             string `xml:"Direction"`
	Status                string `xml:"Status"`
}

func (s *Service) GetCurrentConnectionInfo(args *GetCurrentConnectionInfoArgs) (*GetCurrentConnectionInfoResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("GetCurrentConnectionInfo",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{GetCurrentConnectionInfo: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.GetCurrentConnectionInfo == nil {
		return nil, errors.New(`unexpected response from service calling connectionmanager.GetCurrentConnectionInfo()`)
	}

	return r.Body.GetCurrentConnectionInfo, nil
}

type UpnpEvent struct {
	XMLName      xml.Name   `xml:"propertyset"`
	XMLNameSpace string     `xml:"xmlns:e,attr"`
	Properties   []Property `xml:"property"`
}
type Property struct {
	XMLName              xml.Name              `xml:"property"`
	SourceProtocolInfo   *SourceProtocolInfo   `xml:"SourceProtocolInfo"`
	SinkProtocolInfo     *SinkProtocolInfo     `xml:"SinkProtocolInfo"`
	CurrentConnectionIDs *CurrentConnectionIDs `xml:"CurrentConnectionIDs"`
}

func (zp *Service) ParseEvent(body []byte) []interface{} {
	var evt UpnpEvent
	var events []interface{}
	err := xml.Unmarshal(body, &evt)
	if err != nil {
		return events
	}
	for _, prop := range evt.Properties {
		_ = prop
		switch {
		case prop.SourceProtocolInfo != nil:
			zp.SourceProtocolInfo = prop.SourceProtocolInfo
			events = append(events, *prop.SourceProtocolInfo)
		case prop.SinkProtocolInfo != nil:
			zp.SinkProtocolInfo = prop.SinkProtocolInfo
			events = append(events, *prop.SinkProtocolInfo)
		case prop.CurrentConnectionIDs != nil:
			zp.CurrentConnectionIDs = prop.CurrentConnectionIDs
			events = append(events, *prop.CurrentConnectionIDs)
		}
	}
	return events
}
