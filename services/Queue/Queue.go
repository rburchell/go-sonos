// Code generated by makeservice. DO NOT EDIT.

// Package queue is a generated Queue package.
package queue

import (
	"bytes"
	"encoding/xml"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
)

const (
	ServiceURN     = "urn:schemas-upnp-org:service:Queue:1"
	EncodingSchema = "http://schemas.xmlsoap.org/soap/encoding/"
	EnvelopeSchema = "http://schemas.xmlsoap.org/soap/envelope/"
)

type ServiceOption func(*Service)

func WithClient(c *http.Client) ServiceOption {
	return func(s *Service) {
		s.client = c
	}
}

func WithLocation(u *url.URL) ServiceOption {
	return func(s *Service) {
		s.location = u
	}
}

type LastChange string

type Service struct {
	controlEndpoint *url.URL
	eventEndpoint   *url.URL

	LastChange *LastChange

	location *url.URL
	client   *http.Client
}

func NewService(opts ...ServiceOption) *Service {
	s := &Service{}

	c, err := url.Parse("/MediaRenderer/Queue/Control")
	if nil != err {
		panic(err)
	}
	e, err := url.Parse("/MediaRenderer/Queue/Event")
	if nil != err {
		panic(err)
	}

	for _, opt := range opts {
		opt(s)
	}

	if s.client == nil {
		panic("no client location")
	}
	if s.location == nil {
		panic("empty location")
	}

	s.controlEndpoint = s.location.ResolveReference(c)
	s.eventEndpoint = s.location.ResolveReference(e)

	return s
}

func (s *Service) ControlEndpoint() *url.URL {
	return s.controlEndpoint
}

func (s *Service) EventEndpoint() *url.URL {
	return s.eventEndpoint
}

func (s *Service) Location() *url.URL {
	return s.location
}

func (s *Service) Client() *http.Client {
	return s.client
}

// internal use only
type envelope struct {
	XMLName       xml.Name `xml:"s:Envelope"`
	Xmlns         string   `xml:"xmlns:s,attr"`
	EncodingStyle string   `xml:"s:encodingStyle,attr"`
	Body          body     `xml:"s:Body"`
}

// internal use only
type body struct {
	XMLName             xml.Name                 `xml:"s:Body"`
	AddURI              *AddURIArgs              `xml:"u:AddURI,omitempty"`
	AddMultipleURIs     *AddMultipleURIsArgs     `xml:"u:AddMultipleURIs,omitempty"`
	AttachQueue         *AttachQueueArgs         `xml:"u:AttachQueue,omitempty"`
	Backup              *BackupArgs              `xml:"u:Backup,omitempty"`
	Browse              *BrowseArgs              `xml:"u:Browse,omitempty"`
	CreateQueue         *CreateQueueArgs         `xml:"u:CreateQueue,omitempty"`
	RemoveAllTracks     *RemoveAllTracksArgs     `xml:"u:RemoveAllTracks,omitempty"`
	RemoveTrackRange    *RemoveTrackRangeArgs    `xml:"u:RemoveTrackRange,omitempty"`
	ReorderTracks       *ReorderTracksArgs       `xml:"u:ReorderTracks,omitempty"`
	ReplaceAllTracks    *ReplaceAllTracksArgs    `xml:"u:ReplaceAllTracks,omitempty"`
	SaveAsSonosPlaylist *SaveAsSonosPlaylistArgs `xml:"u:SaveAsSonosPlaylist,omitempty"`
}

// internal use only
type envelopeResponse struct {
	XMLName       xml.Name     `xml:"Envelope"`
	Xmlns         string       `xml:"xmlns:s,attr"`
	EncodingStyle string       `xml:"encodingStyle,attr"`
	Body          bodyResponse `xml:"Body"`
}

// internal use only
type bodyResponse struct {
	XMLName             xml.Name                     `xml:"Body"`
	AddURI              *AddURIResponse              `xml:"AddURIResponse,omitempty"`
	AddMultipleURIs     *AddMultipleURIsResponse     `xml:"AddMultipleURIsResponse,omitempty"`
	AttachQueue         *AttachQueueResponse         `xml:"AttachQueueResponse,omitempty"`
	Backup              *BackupResponse              `xml:"BackupResponse,omitempty"`
	Browse              *BrowseResponse              `xml:"BrowseResponse,omitempty"`
	CreateQueue         *CreateQueueResponse         `xml:"CreateQueueResponse,omitempty"`
	RemoveAllTracks     *RemoveAllTracksResponse     `xml:"RemoveAllTracksResponse,omitempty"`
	RemoveTrackRange    *RemoveTrackRangeResponse    `xml:"RemoveTrackRangeResponse,omitempty"`
	ReorderTracks       *ReorderTracksResponse       `xml:"ReorderTracksResponse,omitempty"`
	ReplaceAllTracks    *ReplaceAllTracksResponse    `xml:"ReplaceAllTracksResponse,omitempty"`
	SaveAsSonosPlaylist *SaveAsSonosPlaylistResponse `xml:"SaveAsSonosPlaylistResponse,omitempty"`
}

func (s *Service) exec(actionName string, envelope *envelope) (*envelopeResponse, error) {
	postBody, err := xml.Marshal(envelope)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", s.controlEndpoint.String(), bytes.NewBuffer(postBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "text/xml; charset=\"utf-8\"")
	req.Header.Set("SOAPAction", ServiceURN+"#"+actionName)
	res, err := s.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	responseBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	var envelopeResponse envelopeResponse
	err = xml.Unmarshal(responseBody, &envelopeResponse)
	if err != nil {
		return nil, err
	}
	return &envelopeResponse, nil
}

type AddURIArgs struct {
	Xmlns                           string `xml:"xmlns:u,attr"`
	QueueID                         uint32 `xml:"QueueID"`
	UpdateID                        uint32 `xml:"UpdateID"`
	EnqueuedURI                     string `xml:"EnqueuedURI"`
	EnqueuedURIMetaData             string `xml:"EnqueuedURIMetaData"`
	DesiredFirstTrackNumberEnqueued uint32 `xml:"DesiredFirstTrackNumberEnqueued"`
	EnqueueAsNext                   bool   `xml:"EnqueueAsNext"`
}
type AddURIResponse struct {
	FirstTrackNumberEnqueued uint32 `xml:"FirstTrackNumberEnqueued"`
	NumTracksAdded           uint32 `xml:"NumTracksAdded"`
	NewQueueLength           uint32 `xml:"NewQueueLength"`
	NewUpdateID              uint32 `xml:"NewUpdateID"`
}

func (s *Service) AddURI(args *AddURIArgs) (*AddURIResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("AddURI",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{AddURI: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.AddURI == nil {
		return nil, errors.New(`unexpected response from service calling queue.AddURI()`)
	}

	return r.Body.AddURI, nil
}

type AddMultipleURIsArgs struct {
	Xmlns                           string `xml:"xmlns:u,attr"`
	QueueID                         uint32 `xml:"QueueID"`
	UpdateID                        uint32 `xml:"UpdateID"`
	ContainerURI                    string `xml:"ContainerURI"`
	ContainerMetaData               string `xml:"ContainerMetaData"`
	DesiredFirstTrackNumberEnqueued uint32 `xml:"DesiredFirstTrackNumberEnqueued"`
	EnqueueAsNext                   bool   `xml:"EnqueueAsNext"`
	NumberOfURIs                    uint32 `xml:"NumberOfURIs"`
	EnqueuedURIsAndMetaData         string `xml:"EnqueuedURIsAndMetaData"`
}
type AddMultipleURIsResponse struct {
	FirstTrackNumberEnqueued uint32 `xml:"FirstTrackNumberEnqueued"`
	NumTracksAdded           uint32 `xml:"NumTracksAdded"`
	NewQueueLength           uint32 `xml:"NewQueueLength"`
	NewUpdateID              uint32 `xml:"NewUpdateID"`
}

func (s *Service) AddMultipleURIs(args *AddMultipleURIsArgs) (*AddMultipleURIsResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("AddMultipleURIs",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{AddMultipleURIs: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.AddMultipleURIs == nil {
		return nil, errors.New(`unexpected response from service calling queue.AddMultipleURIs()`)
	}

	return r.Body.AddMultipleURIs, nil
}

type AttachQueueArgs struct {
	Xmlns        string `xml:"xmlns:u,attr"`
	QueueOwnerID string `xml:"QueueOwnerID"`
}
type AttachQueueResponse struct {
	QueueID           uint32 `xml:"QueueID"`
	QueueOwnerContext string `xml:"QueueOwnerContext"`
}

func (s *Service) AttachQueue(args *AttachQueueArgs) (*AttachQueueResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("AttachQueue",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{AttachQueue: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.AttachQueue == nil {
		return nil, errors.New(`unexpected response from service calling queue.AttachQueue()`)
	}

	return r.Body.AttachQueue, nil
}

type BackupArgs struct {
	Xmlns string `xml:"xmlns:u,attr"`
}
type BackupResponse struct {
}

func (s *Service) Backup(args *BackupArgs) (*BackupResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("Backup",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{Backup: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.Backup == nil {
		return nil, errors.New(`unexpected response from service calling queue.Backup()`)
	}

	return r.Body.Backup, nil
}

type BrowseArgs struct {
	Xmlns          string `xml:"xmlns:u,attr"`
	QueueID        uint32 `xml:"QueueID"`
	StartingIndex  uint32 `xml:"StartingIndex"`
	RequestedCount uint32 `xml:"RequestedCount"`
}
type BrowseResponse struct {
	Result         string `xml:"Result"`
	NumberReturned uint32 `xml:"NumberReturned"`
	TotalMatches   uint32 `xml:"TotalMatches"`
	UpdateID       uint32 `xml:"UpdateID"`
}

func (s *Service) Browse(args *BrowseArgs) (*BrowseResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("Browse",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{Browse: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.Browse == nil {
		return nil, errors.New(`unexpected response from service calling queue.Browse()`)
	}

	return r.Body.Browse, nil
}

type CreateQueueArgs struct {
	Xmlns             string `xml:"xmlns:u,attr"`
	QueueOwnerID      string `xml:"QueueOwnerID"`
	QueueOwnerContext string `xml:"QueueOwnerContext"`
	QueuePolicy       string `xml:"QueuePolicy"`
}
type CreateQueueResponse struct {
	QueueID uint32 `xml:"QueueID"`
}

func (s *Service) CreateQueue(args *CreateQueueArgs) (*CreateQueueResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("CreateQueue",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{CreateQueue: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.CreateQueue == nil {
		return nil, errors.New(`unexpected response from service calling queue.CreateQueue()`)
	}

	return r.Body.CreateQueue, nil
}

type RemoveAllTracksArgs struct {
	Xmlns    string `xml:"xmlns:u,attr"`
	QueueID  uint32 `xml:"QueueID"`
	UpdateID uint32 `xml:"UpdateID"`
}
type RemoveAllTracksResponse struct {
	NewUpdateID uint32 `xml:"NewUpdateID"`
}

func (s *Service) RemoveAllTracks(args *RemoveAllTracksArgs) (*RemoveAllTracksResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RemoveAllTracks",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RemoveAllTracks: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RemoveAllTracks == nil {
		return nil, errors.New(`unexpected response from service calling queue.RemoveAllTracks()`)
	}

	return r.Body.RemoveAllTracks, nil
}

type RemoveTrackRangeArgs struct {
	Xmlns          string `xml:"xmlns:u,attr"`
	QueueID        uint32 `xml:"QueueID"`
	UpdateID       uint32 `xml:"UpdateID"`
	StartingIndex  uint32 `xml:"StartingIndex"`
	NumberOfTracks uint32 `xml:"NumberOfTracks"`
}
type RemoveTrackRangeResponse struct {
	NewUpdateID uint32 `xml:"NewUpdateID"`
}

func (s *Service) RemoveTrackRange(args *RemoveTrackRangeArgs) (*RemoveTrackRangeResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("RemoveTrackRange",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{RemoveTrackRange: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.RemoveTrackRange == nil {
		return nil, errors.New(`unexpected response from service calling queue.RemoveTrackRange()`)
	}

	return r.Body.RemoveTrackRange, nil
}

type ReorderTracksArgs struct {
	Xmlns          string `xml:"xmlns:u,attr"`
	QueueID        uint32 `xml:"QueueID"`
	StartingIndex  uint32 `xml:"StartingIndex"`
	NumberOfTracks uint32 `xml:"NumberOfTracks"`
	InsertBefore   uint32 `xml:"InsertBefore"`
	UpdateID       uint32 `xml:"UpdateID"`
}
type ReorderTracksResponse struct {
	NewUpdateID uint32 `xml:"NewUpdateID"`
}

func (s *Service) ReorderTracks(args *ReorderTracksArgs) (*ReorderTracksResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("ReorderTracks",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{ReorderTracks: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.ReorderTracks == nil {
		return nil, errors.New(`unexpected response from service calling queue.ReorderTracks()`)
	}

	return r.Body.ReorderTracks, nil
}

type ReplaceAllTracksArgs struct {
	Xmlns                   string `xml:"xmlns:u,attr"`
	QueueID                 uint32 `xml:"QueueID"`
	UpdateID                uint32 `xml:"UpdateID"`
	ContainerURI            string `xml:"ContainerURI"`
	ContainerMetaData       string `xml:"ContainerMetaData"`
	CurrentTrackIndex       uint32 `xml:"CurrentTrackIndex"`
	NewCurrentTrackIndices  string `xml:"NewCurrentTrackIndices"`
	NumberOfURIs            uint32 `xml:"NumberOfURIs"`
	EnqueuedURIsAndMetaData string `xml:"EnqueuedURIsAndMetaData"`
}
type ReplaceAllTracksResponse struct {
	NewQueueLength uint32 `xml:"NewQueueLength"`
	NewUpdateID    uint32 `xml:"NewUpdateID"`
}

func (s *Service) ReplaceAllTracks(args *ReplaceAllTracksArgs) (*ReplaceAllTracksResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("ReplaceAllTracks",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{ReplaceAllTracks: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.ReplaceAllTracks == nil {
		return nil, errors.New(`unexpected response from service calling queue.ReplaceAllTracks()`)
	}

	return r.Body.ReplaceAllTracks, nil
}

type SaveAsSonosPlaylistArgs struct {
	Xmlns    string `xml:"xmlns:u,attr"`
	QueueID  uint32 `xml:"QueueID"`
	Title    string `xml:"Title"`
	ObjectID string `xml:"ObjectID"`
}
type SaveAsSonosPlaylistResponse struct {
	AssignedObjectID string `xml:"AssignedObjectID"`
}

func (s *Service) SaveAsSonosPlaylist(args *SaveAsSonosPlaylistArgs) (*SaveAsSonosPlaylistResponse, error) {
	args.Xmlns = ServiceURN
	r, err := s.exec("SaveAsSonosPlaylist",
		&envelope{
			EncodingStyle: EncodingSchema,
			Xmlns:         EnvelopeSchema,
			Body:          body{SaveAsSonosPlaylist: args},
		})
	if err != nil {
		return nil, err
	}
	if r.Body.SaveAsSonosPlaylist == nil {
		return nil, errors.New(`unexpected response from service calling queue.SaveAsSonosPlaylist()`)
	}

	return r.Body.SaveAsSonosPlaylist, nil
}

type UpnpEvent struct {
	XMLName      xml.Name   `xml:"propertyset"`
	XMLNameSpace string     `xml:"xmlns:e,attr"`
	Properties   []Property `xml:"property"`
}
type Property struct {
	XMLName    xml.Name    `xml:"property"`
	LastChange *LastChange `xml:"LastChange"`
}

func (zp *Service) ParseEvent(body []byte) []interface{} {
	var evt UpnpEvent
	var events []interface{}
	err := xml.Unmarshal(body, &evt)
	if err != nil {
		return events
	}
	for _, prop := range evt.Properties {
		_ = prop
		switch {
		case prop.LastChange != nil:
			zp.LastChange = prop.LastChange
			events = append(events, *prop.LastChange)
		}
	}
	return events
}
